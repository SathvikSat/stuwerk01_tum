[
    {
        "0": " cnt = 0;",
        "1": " for (i = 31 to 0) {",
        "2": "   if (Rs1[i] == 0) {",
        "3": "     cnt = cnt + 1;",
        "4": "   } else {",
        "5": "     break;",
        "6": "   }",
        "7": " }",
        "8": " Rd = cnt;"
    },
    {
        "0": " shamt = Rs2[5:0];  // FSR",
        "1": " shamt = imm6u;     // FSRI",
        "2": "",
        "3": " lowpt = Rs1;",
        "4": " highpt = Rs3;",
        "5": " if (shamt u>= 32) {",
        "6": "   shamt = shamt - 32;",
        "7": "   lowpt = Rs3;",
        "8": "   highpt = Rs1;",
        "9": " }",
        "10": " //TODO: coreDSL specific datatype uint64_t src = highpt::lowpt",
        "12": " ",
        "13": " Rd = src[31+shamt:shamt];"
    },
    {
        "0": " shamt = Rs2[5:0];  // FSRW",
        "1": " lowpt = Rs1.W[0];",
        "2": " highpt = Rs3.W[0];",
        "3": " if (shamt u>= 32) {",
        "4": "   shamt = shamt - 32;",
        "5": "   lowpt = Rs3.W[0];",
        "6": "   highpt = Rs1.W[0];",
        "7": " }",
        "9": " wres = src[31+shamt:shamt];",
        "10": " Rd = signed<64>(wres)"
    },
    {
        "0": " if (Rs1 s>= Rs2) {",
        "1": "   res = Rs1;",
        "2": " } else {",
        "3": "   res = Rs2;",
        "4": " }",
        "5": " Rd = res;"
    },
    {
        "0": " if (Rs1 s>= Rs2) {",
        "1": "   res = Rs2;",
        "2": " } else {",
        "3": "   res = Rs1;",
        "4": " }",
        "5": " Rd = res;"
    },
    {
        "0": "*RV32*",
        "1": "",
        "4": "",
        "5": "*RV64*",
        "6": ""
    },
    {
        "0": " rev[0:(XLEN-1)] = Rs1[(XLEN-1):0];",
        "1": " Rd = rev[(XLEN-1):0];"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " res33 = signed<33>(1)",
        "3": " Rd = res33[32:1];",
        "4": "",
        "5": "*RV64:*",
        "6": "",
        "7": " res65 = signed<65>(1)",
        "8": " Rd = res65[64:1];"
    },
    {
        "0": " msb = Rs2[4:0]; // RV32",
        "1": " msb = Rs2[5:0]; // RV64",
        "2": " rev[0:msb] = Rs1[msb:0];",
        "3": " Rd = ZE32(rev[msb:0]);   // RV32",
        "4": " Rd = ZE64(rev[msb:0]);   // RV64"
    },
    {
        "0": " msb = imm5u; // RV32",
        "1": " msb = imm6u; // RV64",
        "2": " rev[0:msb] = Rs1[msb:0];",
        "3": " Rd = ZE32(rev[msb:0]);   // RV32",
        "4": " Rd = ZE64(rev[msb:0]);   // RV64"
    },
    {
        "0": " Rd.W[x].H[1] = Rs1.W[x].H[1] - Rs2.W[x].H[0];",
        "1": " Rd.W[x].H[0] = Rs1.W[x].H[0] + Rs2.W[x].H[1];",
        "2": " for RV32, x=0",
        "3": " for RV64, x=1..0",
        "4": ""
    },
    {
        "0": " bpos = imm2u;  // RV32",
        "1": " bpos = imm3u;  // RV64",
        "2": " Rd.B[bpos] = Rs1.B[0]"
    },
    {
        "0": " if (Rs1.W[0] s>= 0) {",
        "1": "   res = Rs1.W[0];",
        "2": " } else {",
        "3": "   If (Rs1.W[0] == 0x80000000) {",
        "4": "     res = 0x7fffffff;",
        "5": "     OV = 1;",
        "6": "   } else {",
        "7": "     res = -Rs1.W[0];",
        "8": "   }",
        "9": " }",
        "10": " Rd = res;        // RV32",
        "11": " Rd = signed<64>(res)"
    },
    {
        "0": " RV32:",
        "4": "  a65 = signed<65>(R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0])",
        "5": "  b65 = signed<65>(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])",
        "6": "  res65 = a65 + b65;",
        "7": "  if (res65 s> (2^63)-1) {",
        "8": "    res65 = (2^63)-1; OV = 1;",
        "9": "  } else if (res65 s< -2^63) {",
        "10": "    res65 = -2^63; OV = 1;",
        "11": "  }",
        "12": "  R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "13": "",
        "14": " RV64:",
        "15": "  a65 = signed<65>(Rs1)",
        "16": "  b65 = signed<65>(Rs2)",
        "17": "  res65 = a65 + b65;",
        "18": "  if (res65 s> (2^63)-1) {",
        "19": "    res65 = (2^63)-1; OV = 1;",
        "20": "  } else if (res65 s< -2^63) {",
        "21": "    res65 = -2^63; OV = 1;",
        "22": "  }",
        "23": "  Rd = res65.D[0];"
    },
    {
        "0": " a17 = signed<17>(Rs1.H[0])",
        "1": " b17 = signed<17>(Rs2.H[0])",
        "2": " res17 = a17 + b17;",
        "3": " if (res17 s> (2^15)-1) {",
        "4": "   res17 = (2^15)-1;",
        "5": "   OV = 1;",
        "6": " } else (res17 s< -2^15) {",
        "7": "   res17 = -2^15;",
        "8": "   OV = 1",
        "9": " }",
        "10": " Rd = signed<32>(res17.H[0])",
        "11": " Rd = signed<64>(res17.H[0])",
        "12": ""
    },
    {
        "0": " a33 = signed<33>(Rs1.W[0])",
        "1": " b33 = signed<33>(Rs2.W[0])",
        "2": " tmp33 = a33 + b33;",
        "3": " if (tmp33 s> (2^31)-1) {",
        "4": "   res32 = (2^31)-1;",
        "5": "   OV = 1;",
        "6": " } else if (tmp33 s< -2^31) {",
        "7": "   re32 = -2^31;",
        "8": "   OV = 1",
        "9": " } else {",
        "10": "   res32 = tmp33.W[0];",
        "11": " }",
        "12": " Rd = res32;       // RV32",
        "13": " Rd = signed<64>(res32)"
    },
    {
        "0": " a17[x] = signed<17>(Rs1.W[x].H[1])",
        "1": " b17[x] = signed<17>(Rs2.W[x].H[0])",
        "2": " c17[x] = signed<17>(Rs1.W[x].H[0])",
        "3": " d17[x] = signed<17>(Rs2.W[x].H[1])",
        "4": " res1 = a17[x] + b17[x];",
        "5": " res2 = c17[x] \u2013 d17[x];",
        "6": " for (res in [res1, res2]) {",
        "7": "   if (res s> (2^15)-1) {",
        "8": "     res = (2^15)-1;",
        "9": "     OV = 1;",
        "10": "   } else if (res s< -2^15) {",
        "11": "     res = -2^15;",
        "12": "     OV = 1;",
        "13": "   }",
        "14": " }",
        "15": " Rd.W[x].H[1] = res1.H[0];",
        "16": " Rd.W[x].H[0] = res2.H[0];",
        "17": " for RV32, x=0",
        "18": " for RV64, x=1..0",
        "19": ""
    },
    {
        "0": " aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMBB",
        "1": " aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMBT",
        "2": " aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMTT",
        "3": "",
        "4": " If ((0x8000 != aop) || (0x8000 != bop)) {",
        "5": "   resQ30[31:0] = aop s* bop;",
        "6": "   shifted[31:0] = resQ30[31:0] << 1;",
        "7": "   resQ31 = shifted[31:0];",
        "8": "   Rd = resQ31;       // RV32",
        "9": "   Rd = signed<64>(resQ31)",
        "10": " } else {",
        "11": "   resQ31 = 0x7FFFFFFF;",
        "12": "   Rd = resQ31;       // RV32",
        "13": "   Rd = signed<64>(resQ31)",
        "14": "   OV = 1;",
        "15": " }"
    },
    {
        "0": " aop = Rs1.H[0]; bop = Rs2.H[0]; // KDMABB",
        "1": " aop = Rs1.H[0]; bop = Rs2.H[1]; // KDMABT",
        "2": " aop = Rs1.H[1]; bop = Rs2.H[1]; // KDMATT",
        "3": " ",
        "4": " If ((0x8000 != aop) || (0x8000 != bop)) {",
        "5": "   resQ30[31:0] = aop s* bop;",
        "6": "   shifted[31:0] = resQ30[31:0] << 1;",
        "7": "   resQ31 = shifted[31:0];",
        "8": " } else {",
        "9": "   resQ31 = 0x7FFFFFFF;",
        "10": "   OV = 1;",
        "11": " }",
        "12": " c33 = signed<33>(Rd.W[0])",
        "13": " d33 = signed<33>(resQ31)",
        "14": " tmp33 = c33 + d33;",
        "15": " if (tmp33 s> (2^31)-1) {",
        "16": "   resadd32 = (2^31)-1;",
        "17": "   OV = 1;",
        "18": " } else if (tmp33 s< -2^31) {",
        "19": "   resadd32 = -2^31;",
        "20": "   OV = 1;",
        "21": " } else {",
        "22": "   resadd32 = tmp33.W[0];",
        "23": " }",
        "24": " Rd = resadd32;       // RV32",
        "25": " Rd = signed<64>(resadd32)",
        "26": ""
    },
    {
        "0": " if (is \u201cKHM8\u201d) {",
        "1": "   op1t = Rs1.B[x+1]; op2t = Rs2.B[x+1]; // top",
        "2": "   op1b = Rs1.B[x];   op2b = Rs2.B[x];   // bottom",
        "3": " } else if (is \u201cKHMX8\u201d) {",
        "4": "   op1t = Rs1.B[x+1]; op2t = Rs2.B[x];   // Rs1 top",
        "5": "   op1b = Rs1.B[x];   op2b = Rs2.B[x+1]; // Rs1 bottom",
        "6": " }",
        "7": " for ((aop,bop,res16) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {",
        "8": "   if ((0x80 != aop) || (0x80 != bop)) {",
        "9": "     mres[15:0] = aop s* bop;",
        "10": "     rshifted[15:0] = mres[15:0] s>> 7;",
        "11": "     res16 = rshifted[15:0];",
        "12": "   } else {",
        "13": "     res16= 0x007F;",
        "14": "     OV = 1;",
        "15": "   }",
        "16": " }",
        "17": " Rd.H[x/2] = concat(rest.B[0], resb.B[0]);",
        "18": "",
        "19": " for RV32, x=0,2",
        "20": " for RV64, x=0,2,4,6"
    },
    {
        "0": " if (is \u201cKHM16\u201d) {",
        "1": "   op1t = Rs1.H[x+1]; op2t = Rs2.H[x+1]; // top",
        "2": "   op1b = Rs1.H[x];   op2b = Rs2.H[x];   // bottom",
        "3": " } else if (is \u201cKHMX16\u201d) {",
        "4": "   op1t = Rs1.H[x+1]; op2t = Rs2.H[x];   // Rs1 top",
        "5": "   op1b = Rs1.H[x];   op2b = Rs2.H[x+1]; // Rs1 bottom",
        "6": " }",
        "7": " for ((aop,bop,res32) in [(op1t,op2t,rest), (op1b,op2b,resb)]) {",
        "8": "   if ((0x8000 != aop) || (0x8000 != bop)) {",
        "9": "     mres[31:0] = aop s* bop;",
        "10": "     rshifted[31:0] = mres[31:0] s>> 15;",
        "11": "     res32 = rshifted[31:0];",
        "12": "   } else {",
        "13": "     res32= 0x00007FFF;",
        "14": "     OV = 1;",
        "15": "   }",
        "16": " }",
        "17": " Rd.W[x/2] = concat(rest.H[0], resb.H[0]);",
        "18": "",
        "19": " for RV32: x=0",
        "20": " for RV64: x=0,2"
    },
    {
        "0": " aop = Rs1.H[0]; bop = Rs2.H[0]; // KHMBB",
        "1": " aop = Rs1.H[0]; bop = Rs2.H[1]; // KHMBT",
        "2": " aop = Rs1.H[1]; bop = Rs2.H[1]; // KHMTT",
        "3": "",
        "4": " If ((0x8000 != aop) || (0x8000 != bop)) {",
        "5": "   res[31:0] = aop s* bop;",
        "6": "   rshifted[31:0] = res[31:0] s>> 15;",
        "7": "   Mres32 = rshifted[31:0];",
        "8": " } else {",
        "9": "   Mres32 = 0x00007FFF;",
        "10": "   OV = 1;",
        "11": " }",
        "12": " Rd = signed<32>(Mres32.H[0])",
        "13": " Rd = signed<64>(Mres32.H[0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "3": " mul65 = signed<65>(Rs1 s* Rs2)",
        "4": " top65 = signed<65>(R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0])",
        "5": " res65 = top65 + mul65;",
        "6": " if (res65 s> (2^63)-1) {",
        "7": "   res65 = (2^63)-1;",
        "8": "   OV = 1;",
        "9": " } else if (res65 s< -2^63) {",
        "10": "   res65 = -2^63;",
        "11": "   OV = 1;",
        "12": " }",
        "13": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "14": "",
        "15": "*RV64:*",
        "16": "",
        "17": " mula66 = signed<66>(Rs1.W[0] s* Rs2.W[0])",
        "18": " mulb66 = signed<66>(Rs1.W[1] s* Rs2.W[1])",
        "19": " res66 = signed<66>(Rd)",
        "20": " if (res66 s> (2^63)-1) {",
        "21": "   res66 = (2^63)-1;",
        "22": "   OV = 1;",
        "23": " } else if (res66 s< -2^63) {",
        "24": "   res66 = -2^63;",
        "25": "   OV = 1;",
        "26": " }",
        "27": " Rd = res66.D[0];"
    },
    {
        "0": " if ((Rs1.W[x] == 0x80000000) && (Rs2.W[x].H[1] == 0x8000)) {",
        "1": "   Rd.W[x] = 0x7fffffff;",
        "2": "   OV = 1;",
        "3": " } else {",
        "4": "   Mres[x][47:0] = Rs1.W[x] s* Rs2.W[x].H[1];",
        "5": "   if (\u201c.u\u201d form) {",
        "6": "     Round[x][32:0] = Mres[x][46:14] + 1;",
        "7": "     Rd.W[x] = Round[x][32:1];",
        "8": "   } else {",
        "9": "     Rd.W[x] = Mres[x][46:15];",
        "10": "   }",
        "11": " }",
        "12": " for RV32: x=0",
        "13": " for RV64: x=1..0",
        "14": ""
    },
    {
        "0": "*RV32:*",
        "1": "",
        "3": " mul65 = signed<65>(Rs1 s* Rs2)",
        "4": " top65 = signed<65>(R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0])",
        "5": " res65 = top65 - mul65;",
        "6": " if (res65 s> (2^63)-1) {",
        "7": "   res65 = (2^63)-1; ",
        "8": "   OV = 1;",
        "9": " } else if (res65 s< -2^63) {",
        "10": "   res65 = -2^63;",
        "11": "   OV = 1;",
        "12": " }",
        "13": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "14": "",
        "15": "",
        "16": "*RV64:*",
        "17": "",
        "18": " mula66 = signed<66>(Rs1.W[0] s* Rs2.W[0])",
        "19": " mulb66 = signed<66>(Rs1.W[1] s* Rs2.W[1])",
        "20": " res66 = signed<66>(Rd)",
        "21": " if (res66 s> (2^63)-1) {",
        "22": "   res66 = (2^63)-1;",
        "23": "   OV = 1;",
        "24": " } else if (res66 s< -2^63) {",
        "25": "   res66 = -2^63;",
        "26": "   OV = 1;",
        "27": " }",
        "28": " Rd = res66.D[0];"
    },
    {
        "0": " sa = Rs2[4:0];",
        "1": " res[(31+sa):0] = Rs1.W[0] << sa;",
        "2": " if (res s> (2^31)-1) {",
        "3": "   res = 0x7fffffff; OV = 1;",
        "4": " } else if (res s< -2^31) {",
        "5": "   res = 0x80000000; OV = 1;",
        "6": " }",
        "7": " Rd = res.W[0]; // RV32",
        "8": " Rd = signed<64>(res.W[0])"
    },
    {
        "0": " sa = imm5u;",
        "1": " res[(31+sa):0] = Rs1.W[0] << sa;",
        "2": " if (res s> (2^31)-1) {",
        "3": "   res = 0x7fffffff; OV = 1;",
        "4": " } else if (res s< -2^31) {",
        "5": "   res = 0x80000000; OV = 1;",
        "6": " }",
        "7": " Rd = res.W[0];       // RV32",
        "8": " Rd = signed<64>(res.W[0])"
    },
    {
        "0": " sa = imm3u;",
        "1": " if (sa != 0) {",
        "2": "   res[(7+sa):0] = Rs1.B[x] << sa;",
        "3": "   if (res s> (2^7)-1) {",
        "4": "     res = 0x7f; OV = 1;",
        "5": "   } else if (res s< -2^7) {",
        "6": "     res = 0x80; OV = 1;",
        "7": "   }",
        "8": "   Rd.B[x] = res.B[0];",
        "9": " } else {",
        "10": "   Rd = Rs1;",
        "11": " }",
        "12": " for RV32: x=3..0,",
        "13": " for RV64: x=7..0",
        "14": ""
    },
    {
        "0": " if (Rs2[3:0] s< 0) {",
        "1": "   sa = -Rs2[3:0];",
        "2": "   sa = (sa == 8)? 7 : sa;",
        "3": "   if (\u201c.u\u201d form) {",
        "4": "     res[7:-1] = signed<9>(Rs1.B[x][7:sa-1])",
        "5": "     Rd.B[x] = res[7:0];",
        "6": "   } else {",
        "7": "     Rd.B[x] = signed<8>(Rs1.B[x][7:sa])",
        "8": "   }",
        "9": " } else {",
        "10": "   sa = Rs2[2:0];",
        "11": "   res[(7+sa):0] = Rs1.B[x] u<< sa;",
        "12": "   if (res s> (2^7)-1) {",
        "13": "     res[7:0] = 0x7f; OV = 1;",
        "14": "   } else if (res s< -2^7) {",
        "15": "     res[7:0] = 0x80; OV = 1;",
        "16": "   }",
        "17": "   Rd.B[x] = res[7:0];",
        "18": " }",
        "19": " for RV32: x=3..0,",
        "20": " for RV64: x=7..0",
        "21": ""
    },
    {
        "0": " if (Rs2[5:0] s< 0) {",
        "1": "   sa = -Rs2[5:0];",
        "2": "   sa = (sa == 32)? 31 : sa;",
        "3": "   res[31:0] = Rs1.W[0] s>> sa;",
        "4": " } else {",
        "5": "   sa = Rs2[5:0];",
        "6": "   tmp[(31+sa):0] = Rs1.W[0] u<< sa;",
        "7": "   if (tmp s> (2^31)-1) {",
        "8": "     res[31:0] = (2^31)-1;",
        "9": "     OV = 1;",
        "10": "   } else if (tmp s< -2^31) {",
        "11": "     res[31:0] = -2^31;",
        "12": "     OV = 1",
        "13": "   } else {",
        "14": "     res[31:0] = tmp[31:0];",
        "15": "   }",
        "16": " }",
        "17": " Rd = res[31:0]; // RV32",
        "18": " Rd = signed<64>(res[31:0])"
    },
    {
        "0": " if (Rs2[5:0] s< 0) {",
        "1": "   sa = -Rs2[5:0];",
        "2": "   sa = (sa == 32)? 31 : sa;",
        "3": "   res[31:-1] = signed<33>(Rs1[31:(sa-1)",
        "4": "   rst[31:0] = res[31:0];",
        "5": " } else {",
        "6": "   sa = Rs2[5:0];",
        "7": "   tmp[(31+sa):0] = Rs1.W[0] u<< sa;",
        "8": "   if (tmp s> (2^31)-1) {",
        "9": "     rst[31:0] = (2^31)-1;",
        "10": "     OV = 1;",
        "11": "   } else if (tmp s< -2^31) {",
        "12": "     rst[31:0] = -2^31;",
        "13": "     OV = 1",
        "14": "   } else {",
        "15": "     rst[31:0] = tmp[31:0];",
        "16": "   }",
        "17": " }",
        "18": " Rd = rst[31:0]; // RV32",
        "19": " Rd = signed<64>(rst[31:0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "5": " res65 = signed<65>(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])",
        "6": " if (res65 s> (2^63)-1) {",
        "7": "   res65 = (2^63)-1; OV = 1;",
        "8": " } else if (res65 s< -2^63) {",
        "9": "   res65 = -2^63; OV = 1;",
        "10": " }",
        "11": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "12": "",
        "13": "*RV64:*",
        "14": "",
        "15": " res65 = signed<65>(Rs2)",
        "16": " if (res65 s> (2^63)-1) {",
        "17": "   res65 = (2^63)-1; OV = 1;",
        "18": " } else if (res65 s< -2^63) {",
        "19": "   res65 = -2^63; OV = 1;",
        "20": " }",
        "21": " Rd = res65.D[0];"
    },
    {
        "0": " a17 = signed<17>(Rs1.H[0])",
        "1": " b17 = signed<17>(Rs2.H[0])",
        "2": " t17 = a17 - b17;",
        "3": " if (t17 s> (2^15)-1) {",
        "4": "   t17 = (2^15)-1;",
        "5": "   OV = 1;",
        "6": " } else (t17 s< -2^15) {",
        "7": "   t17 = -2^15;",
        "8": "   OV = 1",
        "9": " }",
        "10": " Rd = signed<32>(t17.H[0])",
        "11": " Rd = signed<64>(t17.H[0])"
    },
    {
        "0": " res33 = signed<33>(Rs2.W[0])",
        "1": " if (res33 s> (2^31)-1) {",
        "2": "   res33 = (2^31)-1;",
        "3": "   OV = 1;",
        "4": " } else if (res33 s< -2^31) {",
        "5": "   res33 = -2^31;",
        "6": "   OV = 1",
        "7": " }",
        "8": " Rd = res33.W[0];       // RV32",
        "9": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mresult = Rs1 * Rs2;",
        "3": " Rd = Rd + Mresult.W[0];  // overflow ignored",
        "4": "",
        "5": "*RV64:*",
        "6": "",
        "7": " Mresult = Rs1.W[0] * Rs2.W[0];",
        "8": " tres[31:0] = Rd.W[0] + Mresult.W[0];  // overflow ignored",
        "9": " Rd = signed<64>(tres[31:0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mresult = Rs1 * Rs2;",
        "3": " Rd = Rd - Mresult.W[0];  // overflow ignored",
        "4": "",
        "5": "*RV64:*",
        "6": "",
        "7": " Mresult = Rs1.W[0] * Rs2.W[0];",
        "8": " tres[31:0] = Rd.W[0] - Mresult.W[0];  // overflow ignored",
        "9": " Rd = signed<64>(tres[31:0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mresult = ZE33(Rs1) u* ZE33(Rs2);",
        "3": " R[Rd(4,1).1(0)][31:0] = Mresult[63:32];",
        "4": " R[Rd(4,1).0(0)][31:0] = Mresult[31:0];",
        "5": "",
        "6": "*RV64:*",
        "7": "",
        "8": " Mresult = ZE33(Rs1.W[0]) u* ZE33(Rs2.W[0]);",
        "9": " Rd = Mresult[63:0];"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mresult = Rs1 s* Rs2;",
        "3": " R[Rd(4,1).1(0)][31:0] = Mresult[63:32];",
        "4": " R[Rd(4,1).0(0)][31:0] = Mresult[31:0];",
        "5": "",
        "6": "*RV64:*",
        "7": "",
        "8": " Mresult = Rs1.W[0] s* Rs2.W[0];",
        "9": " Rd = Mresult[63:0];"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "5": " res65 = signed<65>(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])",
        "6": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "7": "",
        "8": "*RV64:*",
        "9": "",
        "10": " res65 = signed<65>(Rs2)",
        "11": " Rd = res65.D[0];"
    },
    {
        "0": " res33 = signed<33>(Rs2.W[0])",
        "1": " ",
        "2": " Rd = res33.W[0];       // RV32",
        "3": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "5": " #TODO: address this multiple SEs in single line ",
        "6": " res65 = signed<65>(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])",
        "7": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "8": "",
        "9": "*RV64:*",
        "10": "",
        "11": " Rd = (Rs1 - Rs2) s>> 1;"
    },
    {
        "0": " res33 = signed<33>(Rs2.W[0])",
        "1": "  ",
        "2": " Rd = res33.W[0];       // RV32",
        "3": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mres[31:0] = Rs2.H[1] s* Rs2.H[0];",
        "5": " // overflow ignored",
        "6": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = signed<64>(Mres[31:0])",
        "7": "",
        "8": "*RV64:*",
        "9": "",
        "10": " Mres[0][31:0] = Rs2.W[0].H[1] s* Rs2.W[0].H[0];",
        "11": " Mres[1][31:0] = Rs2.W[1].H[1] s* Rs2.W[1].H[0];",
        "12": " // overflow ignored",
        "13": " Rd = signed<64>(Mres[0][31:0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " Mres[31:0] = Rs1.H[0] s* Rs2.H[0]; // SMALBB",
        "3": " Mres[31:0] = Rs1.H[0] s* Rs2.H[1]; // SMALBT",
        "4": " Mres[31:0] = Rs1.H[1] s* Rs2.H[1]; // SMALTT",
        "6": " // overflow ignored",
        "7": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = signed<64>(Mres[31:0])",
        "8": "",
        "9": "",
        "10": "*RV64:*",
        "11": "",
        "12": " // SMALBB",
        "13": " Mres[0][31:0] = Rs1.W[0].H[0] s* Rs2.W[0].H[0];",
        "14": " Mres[1][31:0] = Rs1.W[1].H[0] s* Rs2.W[1].H[0];",
        "15": "",
        "16": " // SMALBT",
        "17": " Mres[0][31:0] = Rs1.W[0].H[0] s* Rs2.W[0].H[1];",
        "18": " Mres[1][31:0] = Rs1.W[1].H[0] s* Rs2.W[1].H[1];",
        "19": "",
        "20": " // SMALTT",
        "21": " Mres[0][31:0] = Rs1.W[0].H[1] s* Rs2.W[0].H[1];",
        "22": " Mres[1][31:0] = Rs1.W[1].H[1] s* Rs2.W[1].H[1];",
        "23": " // overflow ignored",
        "24": " Rd = signed<64>(Mres[1][31:0])"
    },
    {
        "0": "*RV32:*",
        "1": "",
        "2": " // SMALDA",
        "3": " Mres0[31:0] = (Rs1.H[0] s* Rs2.H[0]);",
        "4": " Mres1[31:0] = (Rs1.H[1] s* Rs2.H[1]);",
        "5": " // SMALXDA",
        "6": " Mres0[31:0] = (Rs1.H[0] s* Rs2.H[1]);",
        "7": " Mres1[31:0] = (Rs1.H[1] s* Rs2.H[0]);",
        "8": "",
        "10": " // overflow ignored",
        "11": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = signed<64>(Mres1[31:0])",
        "12": "",
        "13": "",
        "14": "*RV64:*",
        "15": "",
        "16": " // SMALDA",
        "17": " Mres0[0][31:0] = (Rs1.W[0].H[0] s* Rs2.W[0].H[0]);",
        "18": " Mres1[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[1]);",
        "19": " Mres0[1][31:0] = (Rs1.W[1].H[0] s* Rs2.W[1].H[0]);",
        "20": " Mres1[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[1]);",
        "21": " // SMALXDA",
        "22": " Mres0[0][31:0] = (Rs1.W[0].H[0] s* Rs2.W[0].H[1]);",
        "23": " Mres1[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[0]);",
        "24": " Mres0[1][31:0] = (Rs1.W[1].H[0] s* Rs2.W[1].H[1]);",
        "25": " Mres1[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[0]);",
        "26": " ",
        "27": " // overflow ignored",
        "28": " Rd = signed<64>(Mres1[1][31:0])",
        "29": ""
    },
    {
        "0": "* RV32:",
        "1": "",
        "2": " // Q31 = Q30 - Q30 = Q15*Q15 - Q15*Q15, overflow ignored",
        "3": " Mres[31:0] = (Rs1.H[1] s* Rs2.H[1]) - (Rs1.H[0] s* Rs2.H[0]); // SMALDS",
        "4": " Mres[31:0] = (Rs1.H[0] s* Rs2.H[0]) - (Rs1.H[1] s* Rs2.H[1]); // SMALDRS",
        "5": " Mres[31:0] = (Rs1.H[1] s* Rs2.H[0]) - (Rs1.H[0] s* Rs2.H[1]); // SMALXDS",
        "6": "",
        "8": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = signed<64>(Mres[31:0])",
        "9": "",
        "10": "* RV64:",
        "11": "",
        "12": " // Q31 = Q30 - Q30 = Q15*Q15 - Q15*Q15, overflow ignored",
        "13": " // SMALDS",
        "14": " Mres[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[1]) - (Rs1.W[0].H[0] s* Rs2.W[0].H[0]);",
        "15": " Mres[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[1]) - (Rs1.W[1].H[0] s* Rs2.W[1].H[0]);",
        "16": "",
        "17": " // SMALDRS",
        "18": " Mres[0][31:0] = (Rs1.W[0].H[0] s* Rs2.W[0].H[0]) - (Rs1.W[0].H[1] s* Rs2.W[0].H[1]);",
        "19": " Mres[1][31:0] = (Rs1.W[1].H[0] s* Rs2.W[1].H[0]) - (Rs1.W[1].H[1] s* Rs2.W[1].H[1]);",
        "20": "",
        "21": " // SMALXDS",
        "22": " Mres[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[0]) - (Rs1.W[0].H[0] s* Rs2.W[0].H[1]);",
        "23": " Mres[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[0]) - (Rs1.W[1].H[0] s* Rs2.W[1].H[1]);",
        "24": "",
        "25": " Rd = signed<64>(Mres[1][31:0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] + (Rs1 s* Rs2);   // overflow discarded",
        "4": "",
        "5": "* RV64:",
        "6": "",
        "7": " Rd = Rd + (Rs1.W[0] s* Rs2.W[0]) + (Rs1.W[1] s* Rs2.W[1]);   // overflow discarded"
    },
    {
        "0": " res[x] = Rd.W[x] +",
        "1": "    SE32(Rs1.W[x].B[3] s* Rs2.W[x].B[3]) + SE32(Rs1.W[x].B[2] s* Rs2.W[x].B[2]) += signed<32>(Rs1.W[x].B[2] s* Rs2.W[x].B[2])",
        "2": "    SE32(Rs1.W[x].B[1] s* Rs2.W[x].B[1]) + SE32(Rs1.W[x].B[0] s* Rs2.W[x].B[0]);   // overflow discarded= signed<32>(Rs1.W[x].B[0] s* Rs2.W[x].B[0])",
        "3": " Rd.W[x] = res[x];",
        "4": " for RV32: x=0,",
        "5": " for RV64: x=1,0"
    },
    {
        "0": "* SMDS:",
        "1": "",
        "2": " Rd.W[x] = (Rs1.W[x].H[1] s* Rs2.W[x].H[1]) - (Rs1.W[x].H[0] s* Rs2.W[x].H[0]);",
        "3": "",
        "4": "* SMDRS:",
        "5": "",
        "6": " Rd.W[x] = (Rs1.W[x].H[0] s* Rs2.W[x].H[0]) - (Rs1.W[x].H[1] s* Rs2.W[x].H[1]);",
        "7": "",
        "8": "* SMXDS:",
        "9": "",
        "10": " Rd.W[x] = (Rs1.W[x].H[1] s* Rs2.W[x].H[0]) - (Rs1.W[x].H[0] s* Rs2.W[x].H[1]);"
    },
    {
        "0": "* RV32:",
        "1": "",
        "2": " // SMSLDA",
        "3": " Mres0[31:0] = (Rs1.H[0] s* Rs2.H[0]);",
        "4": " Mres1[31:0] = (Rs1.H[1] s* Rs2.H[1]);",
        "5": " // SMSLXDA",
        "6": " Mres0[31:0] = (Rs1.H[0] s* Rs2.H[1]);",
        "7": " Mres1[31:0] = (Rs1.H[1] s* Rs2.H[0]);",
        "8": "",
        "10": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = signed<64>(Mres1[31:0])",
        "11": "",
        "12": "",
        "13": "* RV64:",
        "14": "",
        "15": " // SMSLDA",
        "16": " Mres0[0][31:0] = (Rs1.W[0].H[0] s* Rs2.W[0].H[0]);",
        "17": " Mres1[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[1]);",
        "18": " Mres0[1][31:0] = (Rs1.W[1].H[0] s* Rs2.W[1].H[0]);",
        "19": " Mres1[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[1]);",
        "20": " // SMSLXDA",
        "21": " Mres0[0][31:0] = (Rs1.W[0].H[0] s* Rs2.W[0].H[1]);",
        "22": " Mres1[0][31:0] = (Rs1.W[0].H[1] s* Rs2.W[0].H[0]);",
        "23": " Mres0[1][31:0] = (Rs1.W[1].H[0] s* Rs2.W[1].H[1]);",
        "24": " Mres1[1][31:0] = (Rs1.W[1].H[1] s* Rs2.W[1].H[0]);",
        "25": "",
        "26": " Rd = signed<64>(Mres1[1][31:0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] - (Rs1 s* Rs2);",
        "4": "",
        "5": "* RV64:",
        "6": "",
        "7": " Rd = Rd - (Rs1.W[0] s* Rs2.W[0]) - (Rs1.W[1] s* Rs2.W[1]);"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " // SMUL8",
        "4": " R[ Rd[4:1]::1'b0].H[0] = Rs1.B[0] s* Rs2.B[0];",
        "5": " R[ Rd[4:1]::1'b0].H[1] = Rs1.B[1] s* Rs2.B[1];",
        "6": " R[ Rd[4:1]::1'b1].H[0] = Rs1.B[2] s* Rs2.B[2];",
        "7": " R[ Rd[4:1]::1'b1].H[1] = Rs1.B[3] s* Rs2.B[3];",
        "8": " // SMULX8",
        "9": " R[ Rd[4:1]::1'b0].H[0] = Rs1.B[0] s* Rs2.B[1];",
        "10": " R[ Rd[4:1]::1'b0].H[1] = Rs1.B[1] s* Rs2.B[0];",
        "11": " R[ Rd[4:1]::1'b1].H[0] = Rs1.B[2] s* Rs2.B[3];",
        "12": " R[ Rd[4:1]::1'b1].H[1] = Rs1.B[3] s* Rs2.B[2];",
        "13": "",
        "14": "* RV64:",
        "15": "",
        "16": " // SMUL8",
        "17": " Rd.W[0].H[0] = Rs1.B[0] s* Rs2.B[0];",
        "18": " Rd.W[0].H[1] = Rs1.B[1] s* Rs2.B[1];",
        "19": " Rd.W[1].H[0] = Rs1.B[2] s* Rs2.B[2];",
        "20": " Rd.W[1].H[1] = Rs1.B[3] s* Rs2.B[3];",
        "21": " // SMULX8",
        "22": " Rd.W[0].H[0] = Rs1.B[0] s* Rs2.B[1];",
        "23": " Rd.W[0].H[1] = Rs1.B[1] s* Rs2.B[0];",
        "24": " Rd.W[1].H[0] = Rs1.B[2] s* Rs2.B[3];",
        "25": " Rd.W[1].H[1] = Rs1.B[3] s* Rs2.B[2];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " // SMUL16",
        "4": " R[ Rd[4:1]::1'b1] = Rs1.H[1] s* Rs2.H[1];",
        "5": " R[ Rd[4:1]::1'b0] = Rs1.H[0] s* Rs2.H[0];",
        "6": " // SMULX16",
        "7": " R[ Rd[4:1]::1'b1] = Rs1.H[1] s* Rs2.H[0];",
        "8": " R[ Rd[4:1]::1'b0] = Rs1.H[0] s* Rs2.H[1];",
        "9": "",
        "10": "* RV64:",
        "11": "",
        "12": " // SMUL16",
        "13": " Rd.W[1] = Rs1.H[1] s* Rs2.H[1];",
        "14": " Rd.W[0] = Rs1.H[0] s* Rs2.H[0];   ",
        "15": " // SMULX16",
        "16": " Rd.W[1] = Rs1.H[1] s* Rs2.H[0];",
        "17": " Rd.W[0] = Rs1.H[0] s* Rs2.H[1];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "2": " sa = Rs2[4:0];",
        "3": " if (sa != 0) {",
        "4": "   res[31:-1] = signed<33>(Rs1[31:(sa-1)",
        "5": "   Rd = res[31:0];",
        "6": " } else {",
        "7": "   Rd = Rs1;",
        "8": " }",
        "9": "",
        "10": "* RV64:",
        "11": "",
        "12": " sa = Rs2[5:0];",
        "13": " if (sa != 0) {",
        "14": "   res[63:-1] = signed<65>(Rs1[63:(sa-1)",
        "15": "   Rd = res[63:0];",
        "16": " } else {",
        "17": "   Rd = Rs1;",
        "18": " }"
    },
    {
        "0": "* RV32:",
        "1": "",
        "2": " sa = imm5u;",
        "3": " if (sa != 0) {",
        "4": "   res[31:-1] = signed<33>(Rs1[31:(sa-1)",
        "5": "   Rd = res[31:0];",
        "6": " } else {",
        "7": "   Rd = Rs1;",
        "8": " }",
        "9": "",
        "10": "* RV64:",
        "11": "",
        "12": " sa = imm6u;",
        "13": " if (sa != 0) {",
        "14": "   res[63:-1] = signed<65>(Rs1[63:(sa-1)",
        "15": "   Rd = res[63:0];",
        "16": " } else {",
        "17": "   Rd = Rs1;",
        "18": " }"
    },
    {
        "0": "* RV32:",
        "1": "",
        "5": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0] - R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0];",
        "6": ""
    },
    {
        "0": " Rd.W[m].H[1] = signed<16>(Rs1.W[m].B[x])",
        "1": " Rd.W[m].H[0] = signed<16>(Rs1.W[m].B[y])",
        "2": " // SUNPKD810, x=1,y=0",
        "3": " // SUNPKD820, x=2,y=0",
        "4": " // SUNPKD830, x=3,y=0",
        "5": " // SUNPKD831, x=3,y=1",
        "6": " // SUNPKD832, x=3,y=2",
        "7": " for RV32: m=0,",
        "8": " for RV64: m=1..0"
    },
    {
        "0": "* RV32:",
        "1": "",
        "5": " res65 = ZE65(R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0]) + ZE65(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0]);",
        "6": " if (res65 u> (2^64)-1) {",
        "7": "   res65 = (2^64)-1; OV = 1;",
        "8": " }",
        "9": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "10": "",
        "11": "* RV64:",
        "12": "",
        "13": " res65 = ZE65(Rs1) + ZE65(Rs2);",
        "14": " if (res65 u> (2^64)-1) {",
        "15": "   res65 = (2^64)-1; OV = 1;",
        "16": " }",
        "17": " Rd = res65.D[0];"
    },
    {
        "0": " a17 = ZE17(Rs1.H[0]);",
        "1": " b17 = ZE17(Rs2.H[0]);",
        "2": " t17 = a17 + b17;",
        "3": " if (t17 u> (2^16)-1) {",
        "4": "   t17 = (2^16)-1;",
        "5": "   OV = 1;",
        "6": " }",
        "7": " Rd = signed<32>(t17.H[0])",
        "8": " Rd = signed<64>(t17.H[0])"
    },
    {
        "0": " res33 = ZE33(Rs1.W[0]) + ZE33(Rs2.W[0]);",
        "1": " if (res33 u> (2^32)-1) {",
        "2": "   res33 = (2^32)-1;",
        "3": "   OV = 1;",
        "4": " }",
        "5": " Rd = res33.W[0];       // RV32",
        "6": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " mul65 = ZE65(Rs1 u* Rs2);",
        "4": " top65 = ZE65(R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0]);",
        "5": " res65 = top65 + mul65;",
        "6": " if (res65 u> (2^64)-1) {",
        "7": "   res65 = (2^64)-1;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "11": "",
        "12": "* RV64:",
        "13": "",
        "14": " mula66 = ZE66(Rs1.W[0] u* Rs2.W[0]);",
        "15": " mulb66 = ZE66(Rs1.W[1] u* Rs2.W[1]);",
        "16": " res66 = ZE66(Rd) + mula66 + mulb66;",
        "17": " if (res66 u> (2^64)-1) {",
        "18": "   res66 = (2^64)-1;",
        "19": "   OV = 1;",
        "20": " }",
        "21": " Rd = res66.D[0];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " mul65 = ZE65(Rs1 u* Rs2);",
        "4": " top65 = ZE65(R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0]);",
        "5": " res65 = top65 - mul65;",
        "6": " if (res65 s< 0) {",
        "7": "   res65 = 0;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "11": "",
        "12": "* RV64:",
        "13": "",
        "14": " mula66 = ZE66(Rs1.W[0] u* Rs2.W[0]);",
        "15": " mulb66 = ZE66(Rs1.W[1] u* Rs2.W[1]);",
        "16": " res66 = ZE66(Rd) - mula66 - mulb66;",
        "17": " if (res66 s< 0) {",
        "18": "   res66 = 0;",
        "19": "   OV = 1;",
        "20": " }",
        "21": " Rd = res66.D[0];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "5": " res65 = ZE65(R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0]) - ZE65(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0]);",
        "6": " if (res65 s< 0) {",
        "7": "   res65 = 0; OV = 1;",
        "8": " }",
        "9": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "10": "",
        "11": "* RV64",
        "12": "",
        "13": " result = Rs1 \u2013 Rs2;",
        "14": " if (result s< 0) {",
        "15": "   result = 0; OV = 1;",
        "16": " }",
        "17": " Rd = result;"
    },
    {
        "0": " a17 = ZE17(Rs1.H[0]);",
        "1": " b17 = ZE17(Rs2.H[0]);",
        "2": " t17 = a17 - b17;",
        "3": " if (t17 s> (2^16)-1) {",
        "4": "   t17 = (2^16)-1;",
        "5": "   OV = 1;",
        "6": " }",
        "7": " else if (t17 s< 0) {",
        "8": "   t17 = 0;",
        "9": "   OV = 1;",
        "10": " }",
        "11": " Rd = signed<32>(t17.H[0])",
        "12": " Rd = signed<64>(t17.H[0])"
    },
    {
        "0": " aop33 = ZE33(Rs1.W[0]);",
        "1": " bop33 = ZE33(Rs2.W[0]);",
        "2": " res33 = aop33 \u2013 bop33;",
        "3": " if (res33 s< 0) {",
        "4": "   res33 = 0;",
        "5": "   OV = 1;",
        "6": " }",
        "7": " Rd = res33.W[0];       // RV32",
        "8": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] + (Rs1 u* Rs2);",
        "4": "",
        "5": "* RV64:",
        "6": "",
        "7": " Rd = Rd + (Rs1.W[0] u* Rs2.W[0]) + (Rs1.W[1] u* Rs2.W[1]);"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] - (Rs1 u* Rs2);",
        "4": "",
        "5": "* RV64:",
        "6": "",
        "7": " Rd = Rd - (Rs1.W[0] u* Rs2.W[0]) - (Rs1.W[1] u* Rs2.W[1]);"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " // UMUL8",
        "4": " R[ Rd[4:1]::1'b0].H[0] = Rs1.B[0] u* Rs2.B[0];",
        "5": " R[ Rd[4:1]::1'b0].H[1] = Rs1.B[1] u* Rs2.B[1];",
        "6": " R[ Rd[4:1]::1'b1].H[0] = Rs1.B[2] u* Rs2.B[2];",
        "7": " R[ Rd[4:1]::1'b1].H[1] = Rs1.B[3] u* Rs2.B[3];",
        "8": " // UMULX8",
        "9": " R[ Rd[4:1]::1'b0].H[0] = Rs1.B[0] u* Rs2.B[1];",
        "10": " R[ Rd[4:1]::1'b0].H[1] = Rs1.B[1] u* Rs2.B[0];",
        "11": " R[ Rd[4:1]::1'b1].H[0] = Rs1.B[2] u* Rs2.B[3];",
        "12": " R[ Rd[4:1]::1'b1].H[1] = Rs1.B[3] u* Rs2.B[2];",
        "13": "",
        "14": "* RV64:",
        "15": "",
        "16": " // UMUL8",
        "17": " Rd.W[0].H[0] = Rs1.B[0] u* Rs2.B[0];",
        "18": " Rd.W[0].H[1] = Rs1.B[1] u* Rs2.B[1];",
        "19": " Rd.W[1].H[0] = Rs1.B[2] u* Rs2.B[2];",
        "20": " Rd.W[1].H[1] = Rs1.B[3] u* Rs2.B[3];",
        "21": " // UMULX8",
        "22": " Rd.W[0].H[0] = Rs1.B[0] u* Rs2.B[1];",
        "23": " Rd.W[0].H[1] = Rs1.B[1] u* Rs2.B[0];",
        "24": " Rd.W[1].H[0] = Rs1.B[2] u* Rs2.B[3];",
        "25": " Rd.W[1].H[1] = Rs1.B[3] u* Rs2.B[2];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " // UMUL16",
        "4": " R[ Rd[4:1]::1'b1] = Rs1.H[1] u* Rs2.H[1];",
        "5": " R[ Rd[4:1]::1'b0] = Rs1.H[0] u* Rs2.H[0]; ",
        "6": " // UMULX16",
        "7": " R[ Rd[4:1]::1'b1] = Rs1.H[1] u* Rs2.H[0];",
        "8": " R[ Rd[4:1]::1'b0] = Rs1.H[0] u* Rs2.H[1];",
        "9": "",
        "10": "* RV64:",
        "11": "",
        "12": " // UMUL16",
        "13": " Rd.W[1] = Rs1.H[1] u* Rs2.H[1];",
        "14": " Rd.W[0] = Rs1.H[0] u* Rs2.H[0];",
        "15": " // UMULX16",
        "16": " Rd.W[1] = Rs1.H[1] u* Rs2.H[0];",
        "17": " Rd.W[0] = Rs1.H[0] u* Rs2.H[1];"
    },
    {
        "0": "* RV32:",
        "1": "",
        "5": " res65 = (ZE65(R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0]) + ZE65(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])) u>> 1;",
        "6": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "7": "",
        "8": "* RV64:",
        "9": "",
        "10": " res65 = (ZE65(Rs1) + ZE65(Rs2)) u>> 1;",
        "11": " Rd = res65.D[0];"
    },
    {
        "0": " res33 = (ZE33(Rs1.W[0]) + ZE33(Rs2.W[0])) u>> 1;",
        "1": " ",
        "2": " Rd = res33.W[0];       // RV32",
        "3": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "5": " res65 = (ZE65(R[ Rs1[4:1]::1'b1].R[ Rs1[4:1]::1'b0]) - ZE65(R[ Rs2[4:1]::1'b1].R[ Rs2[4:1]::1'b0])) u>> 1;",
        "6": " R[ Rd[4:1]::1'b1].R[ Rd[4:1]::1'b0] = res65.D[0];",
        "7": "",
        "8": "",
        "9": "* RV64:",
        "10": "",
        "11": " res65 = (ZE65(Rs1) - ZE65(Rs2)) u>> 1;",
        "12": " Rd = res65.D[0];"
    },
    {
        "0": " res33 = (ZE33(Rs1.W[0]) - ZE33(Rs2.W[0])) u>> 1;",
        "1": "   ",
        "2": " Rd = res33.W[0];       // RV32",
        "3": " Rd = signed<64>(res33.W[0])"
    },
    {
        "0": "* RV32:",
        "1": "",
        "3": " src[63:0] = Concat(R[ Rs1[4:1]::1'b1], R[ Rs1[4:1]::1'b0]);",
        "4": " LSB = imm5u;",
        "5": " Rd = src[31+LSB:LSB];",
        "6": "",
        "7": "* RV64:",
        "8": "",
        "9": " LSB = imm5u;",
        "10": " ExtractW = Rs1[31+LSB:LSB];",
        "11": " Rd = signed<64>(ExtractW)"
    },
    {
        "0": "* RV32:",
        "1": "",
        "4": " LSBloc = Rs2[4:0];",
        "5": " Rd = src[31+LSBloc:LSBloc];",
        "6": "",
        "7": "* RV64:",
        "8": "",
        "9": " LSBloc = Rs2[4:0];",
        "10": " ExtractW = Rs1[31+LSBloc:LSBloc];",
        "11": " Rd = signed<64>(ExtractW)"
    },
    {
        "0": " Rd.W[m].H[1] = ZE16(Rs1.W[m].B[x])",
        "1": " Rd.W[m].H[0] = ZE16(Rs1.W[m].B[y])",
        "2": " // ZUNPKD810, x=1,y=0",
        "3": " // ZUNPKD820, x=2,y=0",
        "4": " // ZUNPKD830, x=3,y=0",
        "5": " // ZUNPKD831, x=3,y=1",
        "6": " // ZUNPKD832, x=3,y=2",
        "7": " for RV32: m=0,",
        "8": " for RV64: m=1..0"
    },
    {
        "0": " Rd.W[1] = Rs1.W[1] + Rs2.W[0];",
        "1": " Rd.W[0] = Rs1.W[0] \u2013 Rs2.W[1];"
    },
    {
        "0": " Rd.W[1] = Rs1.W[1] - Rs2.W[0];",
        "1": " Rd.W[0] = Rs1.W[0] + Rs2.W[1];"
    },
    {
        "0": " // KDMBB16: (x,y,z)=(0,0,0),(2,2,1)",
        "1": " // KDMBT16: (x,y,z)=(0,1,0),(2,3,1)",
        "2": " // KDMTT16: (x,y,z)=(1,1,0),(3,3,1)",
        "3": " aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];",
        "4": " If ((0x8000 != aop[z]) || (0x8000 != bop[z])) {",
        "5": "   Mres32[z] = aop[z] * bop[z];",
        "6": "   shifted33[z] = signed<33>(Mres32[z])",
        "7": "   resQ31[z] =  shifted33[z].W[0];",
        "8": " } else {",
        "9": "   resQ31[z] = 0x7FFFFFFF;",
        "10": "   OV = 1;",
        "11": " }",
        "12": " Rd.W[z] = resQ31[z];"
    },
    {
        "0": " // KDMABB16: (x,y,z)=(0,0,0),(2,2,1)",
        "1": " // KDMABT16: (x,y,z)=(0,1,0),(2,3,1)",
        "2": " // KDMATT16: (x,y,z)=(1,1,0),(3,3,1)",
        "3": " aop[z] = Rs1.H[x]; bop[z] = Rs2.H[y];",
        "4": " If ((0x8000 != aop[z]) || (0x8000 != bop[z])) {",
        "5": "   Mres32[z] = aop[z] * bop[z];",
        "6": "   shifted33[z] = signed<33>(Mres32[z])",
        "7": "   resQ31[z] = shifted33[z].W[0];",
        "8": " } else {",
        "9": "   resQ31[z] = 0x7FFFFFFF;",
        "10": "   OV = 1;",
        "11": " }",
        "12": " resadd[z] = signed<33>(resQ31[z])",
        "13": " if (resadd[z] s> (2^31)-1) {",
        "14": "   resadd[z] = (2^31)-1;",
        "15": "   OV = 1;",
        "16": " } else if (resadd[z] s< -2^31) {",
        "17": "   resadd[z] = -2^31;",
        "18": "   OV = 1;",
        "19": " }",
        "20": " Rd.W[z] = resadd[z].W[0];"
    },
    {
        "0": " // KHMBB16: (x,y,z)=(0,0,0),(2,2,1)",
        "1": " // KHMBT16: (x,y,z)=(0,1,0),(2,3,1)",
        "2": " // KHMTT16: (x,y,z)=(1,1,0),(3,3,1)",
        "3": " aop = Rs1.H[x]; bop = Rs2.H[y];",
        "4": " If ((0x8000 != aop) || (0x8000 != bop)) {",
        "5": "   Mresult[31:0] = aop * bop;",
        "6": "   res[15:0] = Mresult[30:15];",
        "7": " } else {",
        "8": "   res[15:0] = 0x7FFF;",
        "9": "   OV = 1;",
        "10": " }",
        "11": " Rd.W[z] = signed<32>(res[15:0])"
    },
    {
        "0": " res65 = signed<65>(Rs1.W[0] s* Rs2.W[0])",
        "1": " res65 = signed<65>(Rs1.W[0] s* Rs2.W[1])",
        "2": " res65 = signed<65>(Rs1.W[1] s* Rs2.W[1])",
        "3": " if (res65 s> (2^63)-1) {",
        "4": "   res65 = (2^63)-1;",
        "5": "   OV = 1;",
        "6": " } else if (res65 s< -2^63) {",
        "7": "   res65 = -2^63;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd = res65.D[0];"
    },
    {
        "0": " res66 = signed<66>(Rs1.W[0] * Rs2.W[0])",
        "1": " res66 = signed<66>(Rs1.W[0] * Rs2.W[1])",
        "2": " if (res66 s> (2^63)-1) {",
        "3": "   res66 = (2^63)-1;",
        "4": "   OV = 1;",
        "5": " } else if (res66 s< -2^63) {",
        "6": "   res66 = -2^63;",
        "7": "   OV = 1;",
        "8": " }",
        "9": " Rd = res66.D[0];"
    },
    {
        "0": " if ((Rs1 != 0x8000000080000000) or (Rs2 != 0x8000000080000000)) {",
        "1": "   Rd = (Rs1.W[1] s* Rs2.W[1]) + (Rs1.W[0] s* Rs2.W[0]); // KMDA32",
        "2": "   Rd = (Rs1.W[1] s* Rs2.W[0]) + (Rs1.W[0] s* Rs2.W[1]); // KMXDA32",
        "3": " } else {",
        "4": "   Rd = 0x7fffffffffffffff;",
        "5": "   OV = 1;",
        "6": " }"
    },
    {
        "0": " res66 = signed<66>(Rs1.W[0] * Rs2.W[0])",
        "1": " res66 = signed<66>(Rs1.W[1] * Rs2.W[1])",
        "2": " res66 = signed<66>(Rs1.W[0] * Rs2.W[1])",
        "3": " if (res66 s> (2^63)-1) {",
        "4": "   res66 = (2^63)-1;",
        "5": "   OV = 1;",
        "6": " } else if (res66 s< -2^63) {",
        "7": "   res66 = -2^63;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd = res66.D[0];"
    },
    {
        "0": " mula64 = Rs1.W[1] s* Rs2.W[1]; mulb64 = Rs1.W[0] s* Rs2.W[0]; // KMSDA32",
        "1": " mula64 = Rs1.W[1] s* Rs2.W[0]; mulb64 = Rs1.W[0] s* Rs2.W[1]; // KMSXDA32",
        "2": " res66 = signed<66>(mulb64)",
        "3": " if (res66 s> (2^63)-1) {",
        "4": "   res66 = (2^63)-1;",
        "5": "   OV = 1;",
        "6": " } else if (res66 s< -2^63) {",
        "7": "   res66 = -2^63;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd = res66.D[0];"
    },
    {},
    {
        "0": " res_add33 = signed<33>(Rs2.W[0])",
        "1": " res_sub33 = signed<33>(Rs2.W[1])",
        "2": " Rd.W[1] = res_add33.W[0];",
        "3": " Rd.W[0] = res_sub33.W[0];"
    },
    {
        "0": " res_sub33 = signed<33>(Rs2.W[0])",
        "1": " res_add33 = signed<33>(Rs2.W[1])",
        "2": " Rd.W[1] = res_sub33.W[0];",
        "3": " Rd.W[0] = res_add33.W[0];"
    },
    {
        "0": " res_add33 = signed<33>(Rs2.W[1])",
        "1": " res_sub33 = signed<33>(Rs2.W[0])",
        "2": " Rd.W[1] = res_add33.W[0];",
        "3": " Rd.W[0] = res_sub33.W[0];"
    },
    {
        "0": " res_sub33 = signed<33>(Rs2.W[1])",
        "1": " res_add33 = signed<33>(Rs2.W[0])",
        "2": " Rd.W[1] = res_sub33.W[0];",
        "3": " Rd.W[0] = res_add33.W[0];"
    },
    {
        "0": " Rd = (Rs1.W[1] s* Rs2.W[1]) - (Rs1.W[0] s* Rs2.W[0]); // SMDS32",
        "1": " Rd = (Rs1.W[0] s* Rs2.W[0]) - (Rs1.W[1] s* Rs2.W[1]); // SMDRS32",
        "2": " Rd = (Rs1.W[1] s* Rs2.W[0]) - (Rs1.W[0] s* Rs2.W[1]); // SMXDS32"
    },
    {
        "0": " sa = imm5u;",
        "1": " if (sa != 0) {",
        "2": "   res[31:-1] = signed<33>(Rs1[31:(sa-1)",
        "3": "   Rd = signed<64>(res[31:0])",
        "4": " } else {",
        "5": "   Rd = signed<64>(Rs1.W[0])",
        "6": " }"
    },
    {
        "0": " Rd.W[1] = Rs1.W[1] + Rs2.W[1];",
        "1": " Rd.W[0] = Rs1.W[0] \u2013 Rs2.W[0];"
    },
    {
        "0": " Rd.W[1] = Rs1.W[1] - Rs2.W[1];",
        "1": " Rd.W[0] = Rs1.W[0] + Rs2.W[0];"
    },
    {
        "0": " res1 = ZE33(Rs1.W[1]) + ZE33(Rs2.W[0]);",
        "1": " res2 = ZE33(Rs1.W[0]) \u2013 ZE33(Rs2.W[1]);",
        "2": " if (res1 u> (2^32)-1) {",
        "3": "   res1 = (2^32)-1;",
        "4": "   OV = 1;",
        "5": " }",
        "6": " if (res2 s< 0) {",
        "7": "   res2 = 0;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd.W[1] = res1.W[0];",
        "11": " Rd.W[0] = res2.W[0];"
    },
    {
        "0": " res1 = ZE33(Rs1.W[1]) - ZE33(Rs2.W[0]);",
        "1": " res2 = ZE33(Rs1.W[0]) + ZE33(Rs2.W[1]);",
        "2": " if (res1 s< 0) {",
        "3": "   res1 = 0;",
        "4": "   OV = 1;",
        "5": " }",
        "6": " if (res2 u> (2^32)-1) {",
        "7": "   res2 = (2^32)-1;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd.W[1] = res1.W[0];",
        "11": " Rd.W[0] = res2.W[0];"
    },
    {
        "0": " res1 = ZE33(Rs1.W[1]) + ZE33(Rs2.W[1]);",
        "1": " res2 = ZE33(Rs1.W[0]) \u2013 ZE33(Rs2.W[0]);",
        "2": " if (res1 u> (2^32)-1) {",
        "3": "   res1 = (2^32)-1;",
        "4": "   OV = 1;",
        "5": " }",
        "6": " if (res2 s< 0) {",
        "7": "   res2 = 0;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd.W[1] = res1.W[0];",
        "11": " Rd.W[0] = res2.W[0];"
    },
    {
        "0": " res1 = ZE33(Rs1.W[1]) - ZE33(Rs2.W[1]);",
        "1": " res2 = ZE33(Rs1.W[0]) + ZE33(Rs2.W[0]);",
        "2": " if (res1 s< 0) {",
        "3": "   res1 = 0;",
        "4": "   OV = 1;",
        "5": " }",
        "6": " if (res2 u> (2^32)-1) {",
        "7": "   res2 = (2^32)-1;",
        "8": "   OV = 1;",
        "9": " }",
        "10": " Rd.W[1] = res1.W[0];",
        "11": " Rd.W[0] = res2.W[0];"
    },
    {
        "0": " res_add33 = (ZE33(Rs1.W[1]) + ZE33(Rs2.W[0])) u>> 1;",
        "1": " res_sub33 = (ZE33(Rs1.W[0]) \u2013 ZE33(Rs2.W[1])) u>> 1;",
        "2": " Rd.W[1] = res_add33.W[0];",
        "3": " Rd.W[0] = res_sub33.W[0];"
    },
    {
        "0": " res_sub33 = (ZE33(Rs1.W[1]) - ZE33(Rs2.W[0])) u>> 1;",
        "1": " res_add33 = (ZE33(Rs1.W[0]) + ZE33(Rs2.W[1])) u>> 1;",
        "2": " Rd.W[1] = res_sub33.W[0];",
        "3": " Rd.W[0] = res_add33.W[0];"
    },
    {
        "0": " res_add33 = (ZE33(Rs1.W[1]) + ZE33(Rs2.W[1])) u>> 1;",
        "1": " res_sub33 = (ZE33(Rs1.W[0]) \u2013 ZE33(Rs2.W[0])) u>> 1;",
        "2": " Rd.W[1] = res_add33.W[0];",
        "3": " Rd.W[0] = res_sub33.W[0];"
    },
    {
        "0": " res_sub33 = (ZE33(Rs1.W[1]) - ZE33(Rs2.W[1])) u>> 1;",
        "1": " res_add33 = (ZE33(Rs1.W[0]) + ZE33(Rs2.W[0])) u>> 1;",
        "2": " Rd.W[1] = res_sub33.W[0];",
        "3": " Rd.W[0] = res_add33.W[0];"
    },
    {
        "0": " if (Rs1.W[0] s>= Rs2.W[0]) {",
        "1": "   res = Rs1.W[0];",
        "2": " } else {",
        "3": "   res = Rs2.W[0];",
        "4": " }",
        "5": " Rd = res;       // RV32",
        "6": " Rd = signed<64>(res)"
    }
]